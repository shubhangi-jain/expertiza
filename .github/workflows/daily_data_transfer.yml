name: Automatic data transfer

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # run daily at midnight

jobs:
  data_transfer:
    runs-on: ubuntu-latest

    steps:
      - name: create wireguard tunnel to deploy Expertiza on private network
        run: |
          sudo apt install wireguard
          echo "${{ secrets.WIREGUARD_PRIVATE_KEY }}" > privatekey
          sudo ip link add wg0 type wireguard
          sudo ip address add 10.0.0.2/24 dev wg0
          sudo wg set wg0 private-key privatekey
          sudo ip link set wg0 up
          sudo wg set wg0 peer ${{ secrets.WIREGUARD_SERVER_PUBLIC_KEY }} allowed-ips 10.0.0.1/32 endpoint 152.14.92.215:50000
          ping -c 4 10.0.0.1
          
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Create dump on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SOURCE_HOST }} 
          username: ${{ secrets.SOURCE_USER }} 
          key: ${{ secrets.SOURCE_KEY }}
          script : |
            mysqldump -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" ${{ secrets.SYNC_MYSQL_SOURCE_DB }} > production_db_dump.sql
            mkdir -p ${{ secrets.SYNC_SOURCE_BACKUP_LOCATION }}
            cp production_db_dump.sql ${{ secrets.SYNC_SOURCE_BACKUP_LOCATION }}/production_db_dump_$(date -d "today" +"%Y%m%d%H%M").sql
            echo "backup copied to ${{ secrets.SYNC_SOURCE_BACKUP_LOCATION }}">> log_file.txt
                    
      - name: Copy Source key to runner
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SOURCE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SOURCE_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SOURCE_KEY }}

      - name: Copy file from production server to github workspace
        run: |
          scp -r -i ~/.ssh/id_rsa ${{ secrets.SOURCE_USER }}@${{ secrets.SOURCE_HOST }}:/home/expertiza/production_db_dump.sql $GITHUB_WORKSPACE
        
      - name: Copy to github workspace
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.TARGET_HOST }} 
          username: ${{ secrets.USER }}
          key: ${{ secrets.TARGET_KEY }} 
          source: "production_db_dump.sql"
          target: "/home/sjain29/"
          
      - name: Login to target server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TARGET_HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.TARGET_KEY }}
          script: |
            mkdir -p ${{ secrets.SYNC_DESTINATION_BACKUP_LOCATION }}
            cp production_db_dump.sql ${{ secrets.SYNC_DESTINATION_BACKUP_LOCATION }}/production_db_dump_$(date -d "today" +"%Y%m%d%H%M").sql
        
          
      - name: Copy Target key to runner
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TARGET_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.TARGET_KEY }}
      
      - name: Drop database if it does not exist
        run: ssh ${{ secrets.USER }}@${{ secrets.TARGET_HOST }} "sudo mysql -u root -p'${{ secrets.MYSQL_ROOT_PASSWORD }}' -e 'DROP DATABASE IF EXISTS ${{ secrets.SYNC_MYSQL_DESTINATION_DB }}'"
      
      - name: Create database on target server
        run: ssh ${{ secrets.USER }}@${{ secrets.TARGET_HOST }} "sudo mysql -u root -p'${{ secrets.MYSQL_ROOT_PASSWORD }}' -e 'CREATE DATABASE ${{ secrets.SYNC_MYSQL_DESTINATION_DB }}'"
      
      - name: Import table on target database
        run: ssh ${{ secrets.USER }}@${{ secrets.TARGET_HOST }} "sudo mysql -u root -p'${{ secrets.MYSQL_ROOT_PASSWORD }}' ${{ secrets.SYNC_MYSQL_DESTINATION_DB }} < /home/sjain29/production_db_dump.sql"
